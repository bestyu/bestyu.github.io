[{"title":"article","date":"2017-04-06T02:21:07.000Z","path":"2017/04/06/article/","text":"压力测试简单介绍 网站性能压力测试是服务器网站性能调优过程中必不可缺少的一环。只有让服务器处在高压情况下，才能真正体现出软件、硬件等各种设置不当所暴露出的问题今日主题 ab测试ab是apachebench命令的缩写。 ab的原理：ab命令会创建多个并发访问线程，模拟多个访问者同时对某一URL地址进行访问。它的测试目标是基于URL的，因此，它既可以用来测试apache的负载压力，也可以测试nginx、lighthttp、tomcat、IIS等其它Web服务器的压力。 ab命令对发出负载的计算机要求很低，它既不会占用很高CPU，也不会占用很多内存。但却会给目标服务器造成巨大的负载，其原理类似CC攻击。自己测试使用也需要注意，否则一次上太多的负载。可能造成目标服务器资源耗完，严重时甚至导致死机 主要名词1.吞吐率（Requests per second）概念：服务器并发处理能力的量化描述，单位是reqs/s，指的是某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。 计算公式：总请求数 / 处理完成这些请求数所花费的时间，即Request per second = Complete requests / Time taken for tests 2.并发连接数（The number of concurrent connections）概念：某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。 3.并发用户数（The number of concurrent users，Concurrency Level）概念：要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连接数。 4.用户平均请求等待时间（Time per request）计算公式：处理完成所有请求数所花费的时间/ （总请求数 / 并发用户数），即Time per request = Time taken for tests /（ Complete requests / Concurrency Level） 5.服务器平均请求等待时间（Time per request: across all concurrent requests）计算公式：处理完成所有请求数所花费的时间 / 总请求数，即Time taken for / testsComplete requests可以看到，它是吞吐率的倒数。同时，它也=用户平均请求等待时间/并发用户数，即Time per request / Concurrency Level 开始行动 下面是我的测试案例： 目标：我自己的一台ECS服务器上的a.php文件 IP http://47.92.37.69/下面进入小黑本 1.进入本地的 apache\\bin下 D:\\wamp\\bin\\apache\\apache2.4.9\\bin&gt;执行下面命令 //测试我的这台ECS 模拟20个人同时访问 共请求600次，将测试结果写入本地的2.html。 12ab.exe -c 20 -n 600 -s 60 -k http://47.92.37.69/a.php &gt;&gt;C:\\Users\\MLG\\Desktop\\2.html // -c 并发数 &nbsp;&nbsp;&nbsp; -n 请求总次数 &nbsp;&nbsp;&nbsp;-k启用HTTP KeepAlive功能，即在一个HTTP会话中执行多个请求 下面是测试的结果This is ApacheBench, Version 2.3 &lt;$Revision: 1554214 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking 47.92.37.69 (be patient) Server Software: nginx/1.11.10 Server Hostname: 47.92.37.69 Server Port: 80 Document Path: /a.php Document Length: 78266 bytes Concurrency Level: 20 Time taken for tests: 91.483 seconds整个测试持续的时间 Complete requests: 600请求总数量 Failed requests: 61失败的请求数量 Keep-Alive requests: 0 Total transferred: 47026369 bytes HTML transferred: 46928569 bytes Requests per second: 6.56 [/sec] (mean)吞吐率 Time per request: 3049.432 [ms] (mean)用户平均请求等待时间 Time per request: 152.472 [ms] (mean, across all concurrent requests)服务器平均请求处理时间 Transfer rate: 502.00 [Kbytes/sec] received平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题 Connection Times (ms) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min &nbsp;&nbsp;&nbsp;&nbsp; mean[+/-sd] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;median &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; max Connect: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 30 &nbsp;&nbsp;&nbsp;&nbsp;63 &nbsp;&nbsp;231.3 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;39 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3042 Processing: &nbsp;&nbsp;&nbsp;217 &nbsp;&nbsp;&nbsp;2183 4412.6 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1160 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;62480 Waiting: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;32 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 163 381.2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;65 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3193 Total: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;252 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2245 4415.8 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1233 &nbsp;&nbsp; 62522 Percentage of the requests served within a certain time (ms) 50% 1233 66% 1714 75% 2295 80% 2704 90% 4555 95% 6616 98% 15079 99% 16347 100% 62522 (longest request) //整个场景中所有请求的响应情况。 在场景中每个请求都有一个响应时间，其中50％的用户响应时间小于1233 毫秒，60％ 的用户响应时间小于1714 毫秒，最大的响应时间小于62522 毫秒","tags":[]},{"title":"使用hexo+github搭建免费个人博客详细教程","date":"2017-04-05T12:17:45.000Z","path":"2017/04/05/blog/","text":"一、 准备工作在开始一切之前，你必须已经： 有一个github账号，没有的话去注册一个； 安装了node.js、npm Node.js是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。Node.js对一些特殊用例进行了优化，提供了替代的API，使得V8在非浏览器环境下运行得更好。 安装： 去下载 node.js，下载好了之后一步二步就安装好了。npm其实是Node.js的包管理工具（package manager）。其实npm已经在Node.js安装的时候顺带装好了。我们在命令提示符或者终端输入npm -v，应该看到类似的输出： 12345$ node -vv6.10.1$ npm -v3.10.10 说明已经安装完成了。 安装了git for windows（或者其它git客户端） 我的使用环境： Windows10 node.js@6.10.2x64 git@2.6.4 hexo@3.3.1 二、使用hexo写博客 Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。 1、原理： 由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 2、注意事项：a、很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行； b、hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导； c、hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的； 3、安装1$ npm install -g hexo 4、初始化在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是e:\\Workspaces\\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。 12$ cd /e/Workspaces/hexo/$ hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图： 5、生成静态文件，启动本地服务查看12$ hexo g # 生成$ hexo s # 启动服务 执行以上命令之后，hexo就会在项目目录下面产生public文件夹并生成相关html文件，这些文件将来都是要提交到github去的： hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容。 第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子： 6、更换主题既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。去官方主题下载主题，个人喜欢的2个主题CyanStyle、yilia。 下载这个主题： 1$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 下载后的主题默认放在hexo目录下themes里面.可以设置主题的配置： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# Headermenu: 主页: / 所有文章: /archives # 随笔: /tags/随笔# SubNavsubnav: github: &quot;#&quot; weibo: &quot;#&quot; rss: &quot;#&quot; zhihu: &quot;#&quot; #douban: &quot;#&quot; #mail: &quot;#&quot; #facebook: &quot;#&quot; #google: &quot;#&quot; #twitter: &quot;#&quot; #linkedin: &quot;#&quot;rss: /atom.xml# Contentexcerpt_link: morefancybox: truemathjax: true# Miscellaneousgoogle_analytics: &apos;&apos;favicon: /favicon.png#你的头像urlavatar: &quot;&quot;#是否开启分享share: true#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论duoshuo: true#是否开启云标签tagcloud: true#是否开启友情链接#不开启——#friends: false#是否开启“关于我”。#不开启——#aboutme: false#开启——aboutme: 我是谁，我从哪里来，我到哪里去？我就是我，是颜色不一样的吃货… 修改配置文件： 修改_config.yml中的theme: landscape改为theme: yilia然后重新生成静态页面 1hexo g 如果出现一些莫名其妙的问题，可以先执行1hexo clean 来清理一下public的内容，然后再来重新生成和发布。 总结：以上，一步一步执行下来之后发现个人的博客已经在本地生成了并且可以查看了，但是只能是自己看到，能不能让其他人查阅呢？ 三、上传到github或者码云等托管控制器上面如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 1、ssh key肯定要配置好。2、其次，配置_config.yml中有关deploy的部分：1234deploy: type: git repository: git@github.com:bestyu/bestyu.github.io.git branch: master 配置完成后，执行部署： 1hexo d 会发现报如下错误： 1ERROR Deployer not found: git 原因是还需要安装一个插件： 1npm install hexo-deployer-git --save 安装完插件后，再执行hexo d 将文件部署到github上至此，任何人就可以通过https://bestyu.github.io/来访问我们部署的个人博客了。 当然，有同学会嫌弃自己的这个网址难记，砸门能不能配上自己的域名进行访问呢？可以滴！前提是有服务器和域名的土豪们。双手奉上配置： 在项目根目录找到source文件，在source下创建一个CNAME文件(无扩展名)，填写下面内容： 12//你要绑定的域名bestyu.xyz 去你购买域名的服务商空间里找到域名解析的选项,修改如下: 最后执行 1$ hexo d // 自动部署到远程仓库根目录下 页面效果： 总结： 1、在GitHub创建仓库的时候要求，用户名.github.io格式。 2、在部署文件上传远程仓库时，要安装npm install hexo-deployer-git –save这个插件。 3、尽量在git bush上执行命令。 四、添加一篇文章 添加文章 hexo n 文章名 # 12$ hexo n blogINFO Created: E:\\workspaces\\hexo\\source\\_posts\\blog.md 执行完后，会在source_posts\\目录下新建文章blog.md，然后自己用Markdown语法编写文章 完成后： 12hexo g # 生成静态文件,hexo d # 部署到git 注意：每新建文章都需要执行。","tags":[]},{"title":"Hello World","date":"2017-04-05T08:36:20.369Z","path":"2017/04/05/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]